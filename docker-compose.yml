version: '3.8'

services:
  db:
    container_name: mysql
    build:
      context: ./database
      dockerfile: Dockerfile
    ports:
      - '3306:3306'
    volumes:
      - mysql_data:/var/lib/mysql
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    restart: unless-stopped

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    restart: unless-stopped

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      #도커 네트워크 내부에선 컨테이너들이 kafka:29092로 접근
      #외부 애플리케이션(스프링부트)에선 localhost:9092로 접근
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      KAFKA_ADVERTISED_PORT: 9092

      #카프카 토픽 레플리카 갯수
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    ports:
      - 9092:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    restart: unless-stopped
  

######클러스터링 용 예시 지우지 마세요######

  # zookeeper:
  #   container_name: zookeeper
  #   hostname: zookeeper
  #   image: confluentinc/cp-zookeeper:7.3.0
  #   ports:
  #     - '2181:2181'
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181 # 컨테이너 내부에서 2181로 실행하도록 설정(default)
  #     ZOOKEEPER_SERVER_ID: 1 # 주키퍼 식별 아이디(단일 주키퍼라 의미X)
  #     ZOOKEEPER_SERVERS: zookeeper:2888:3888 # 주키퍼 여러 개일때, 서로 통신(단일 주키퍼라 의미X) / 3888은 마스터포트
  #     ZOOKEEPER_TRICK_TIME: 2000 # 주키퍼가 클러스터 구성할 때 동기화 틱 시간
  #     ZOOKEEPER_INIT_LIMIT: 5 # 초기화 제한 시간(단일 주키퍼라 의미X)
  #     ZOOKEEPER_SYNC_LIMIT: 2 # 마스터와 슬레이브들 싱크 제한 시간(단일 주키퍼라 의미X)
  #   restart: unless-stopped

  # kafka1:
  #   container_name: kafka1
  #   hostname: kafka1
  #   image: confluentinc/cp-kafka:7.3.0
  #   ports:
  #     - '9092:9092'
  #     - '29092:29092'
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://localhost:9092,DOCKER://host.docker.internal:29092 # 외부에서 접속하기 위한 리스너
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT # 보안을 위한 프로토콜 매핑
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL # 도커 내부에서 사용할 리스너 이름
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181' # 연결한 주키퍼
  #     KAFKA_BROKER_ID: 1 # 브로커 아이디
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO" # 로그 설정
  #     #도커 네트워크 내부에선 컨테이너들이 kafka:29092로 접근
  #     #외부 애플리케이션(스프링부트)에선 localhost:9092로 접근
      
  #     # KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer # ACL 접근 제어 목록
  #     # KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true" # 카프카 브로커가 접근 권한이 없어도 동작 허용
  #   depends_on:
  #     - zookeeper
  #   restart: unless-stopped

  # kafka2:
  #   container_name: kafka2
  #   hostname: kafka2
  #   image: confluentinc/cp-kafka:7.3.0
  #   ports:
  #     - '9093:9093'
  #     - '29093:29093'
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://localhost:9093,DOCKER://host.docker.internal:29093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:ㅇPLAINTEXT,DOCKER:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_BROKER_ID: 2
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #   depends_on:
  #     - zookeeper
  #   restart: unless-stopped

  # kafka3:
  #   container_name: kafka3
  #   hostname: kafka3
  #   image: confluentinc/cp-kafka:7.3.0
  #   ports:
  #     - '9094:9094'
  #     - '29094:29094'
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19094,EXTERNAL://localhost:9094,DOCKER://host.docker.internal:29094
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_BROKER_ID: 3
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #   depends_on:
  #     - zookeeper
  #   restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
