server:
  port: 8080

spring:
  application:
    name: cmsplus-main
  jwt:
    secret: ${JWT_SECRET}
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/cmsplusmain?serverTimezone=UTC&characterEncoding=UTF-8
    username: root
    password: 1004

  jpa:
    hibernate:
      ddl-auto: create

    properties:
      hibernate:
        show_sql: true
        format_sql: true
        use_sql_comments: true
        default_batch_fetch_size: 100
    open-in-view: false
    defer-datasource-initialization: true

  sql:
    init:
      mode: always

  data:
    redis:
      host: localhost
      port: 6379



#  kafka:
#    producer:
#      bootstrap-servers: localhost:9092
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

setting:
  kafka:
    bootstrapServers: host.docker.internal:29092, host.docker.internal:29093, host.docker.internal:29094 # 카프카 브로커 서버 주소
    topic1: sms-topic # 카프카 토픽
    partition: 3 # 카프카 파티션 갯수
    replication: 3 # 카프카 레플리카 갯수

#  config:
#    import: kafka.yml
#  kafka:
#    producer:
#      bootstrap-servers: kafka:9092
#      acks: all
#      # acks=0: 가장 빠름, 메시지 손실 가능성 큼
#      # acks=1: 조금 느림, 파티션의 leader가 메시지를 받았는지 확인, 메시지 손실 가능성 적음

logging:
  level:
    org.hibernate.orm.jdbc.bind: trace

cloud:
  aws:
    s3:
      bucket: ${S3_BUCKET}
    stack.auto: false
    region.static: ap-northeast-2
    credentials:
      accessKey: ${S3_ACCESS_KEY}
      secretKey: ${S3_SECRET_KEY}
